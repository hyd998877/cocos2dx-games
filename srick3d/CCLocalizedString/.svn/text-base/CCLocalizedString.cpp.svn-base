//
//  CCLocalizedString.cpp
//  SkeletonX
//
//  Created by mac on 11-12-1.
//  Copyright (c) 2011年 GeekStudio. All rights reserved.
//


#include "CCApplication.h"
#include "CCCommon.h"
#include "CCFileUtils.h"
#include "CCDirector.h"
#include "CommonExt.h"
#include "CCString.h"
USING_NS_CC;

#include "CCLocalizedString.h"

static map<std::string,std::string> localizedStrings;

const char * CCLocalizedString(const char * mKey,const char * mComment)
{
    
    LanguageType curLanguage = CCApplication::getCurrentLanguage();
    const char * fileName;
    switch (curLanguage) {
        case kLanguageEnglish:
            fileName = "Localized_en";
            break;
        case kLanguageChinese:
            fileName = "Localized_zh";
            break;
        default:
            fileName = "Localized_en";
            break;
    }

    std::string resultStr;
    
    if (localizedStrings.empty()) 
    {

        std::string line;
        ifstream in(CCFileUtils::fullPathFromRelativePath(fileName));
        
        
        
        if(!in)
        {
            std::cout << "Open file failed" <<std::endl;
//            debug_Printf("Open file failed");
            return mComment;
        }
        
        while(std::getline(in,line))
        {
//            debug_Printf("line :%s",line.c_str());
            if (line.find("/*",0) == string::npos && line.find("//",0) == string::npos) //filter the valid string of one line
            {
//                debug_Printf("find the line not start with \" /* \"");
                std::string::size_type validPos= line.find('=',0);
                if ( validPos != string::npos) 
                {
//                    debug_Printf("fimd the line contain \" = \"");
                    std::string keyStr = line.substr(0,validPos-1);
                    std::string subStr = line.substr(validPos+1,line.size()-1); // get valid string
 
                    //trim space
                    keyStr.erase(0, keyStr.find_first_not_of(" \t")); // 去掉头部空格
                    keyStr.erase(keyStr.find_last_not_of(" \t") + 1); // 去掉尾部空格
                    
                    subStr.erase(0, subStr.find_first_not_of(" \t")); // 去掉头部空格
                    subStr.erase(subStr.find_last_not_of(" \t") + 1); // 去掉尾部空格
                    
                    //trim \" 
                    keyStr.erase(0, keyStr.find_first_not_of("\""));
                    keyStr.erase(keyStr.find_last_not_of("\"") + 1);
                    
                    subStr.erase(0, subStr.find_first_not_of("\""));
                    
                    
                    //trim ; character and last \" character
                    subStr.erase(subStr.find_last_not_of(";") + 1);
                    subStr.erase(subStr.find_last_not_of("\"") + 1);
                    
                    localizedStrings.insert(std::pair<std::string, std::string>(keyStr,subStr));
                    
                    const char * keyChars = keyStr.c_str();
                    
                    if (strcmp(keyChars,mKey) == 0) {
                        resultStr = subStr;
                    }
                }
            }
        }
        //must close file operation
        in.close();
        //return valid value
        if (resultStr.length() > 0){
            CCString *retCCString = new CCString();
            retCCString->autorelease();
            retCCString->m_sString = resultStr;
            return retCCString->m_sString.c_str();
        }
        return mComment;
    }
    else
    {
        std::map<std::string,std::string>::iterator itr = localizedStrings.find(std::string(mKey));
        if (itr != localizedStrings.end()) {
            resultStr = itr->second;
            if (resultStr.length() > 0)
            {
                CCString *retCCString = new CCString();
                retCCString->autorelease();
                retCCString->m_sString = resultStr;
                return retCCString->m_sString.c_str();
            }
        }
    }
    return mComment;
}
